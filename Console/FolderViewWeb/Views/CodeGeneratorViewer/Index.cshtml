<!-- Incluir highlight.js desde un CDN -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/default.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/go.min.js"></script>
<script>hljs.highlightAll();</script>

<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>


<div class="content-wrapper" style="display:grid; grid-template-columns: 1fr; height: 100%" x-data="codeGeneratorApp()" >
    <section class="" style="margin: 20px">
        <div class="container-fluid">
            <div class="row">
                <div class="col text-left">
                    <h1 x-text="project.nombreProyecto"></h1>
                </div>
            </div>
            <div class="row">
                <div class="col text-right" style="margin: 10px 0px;">
                    <a class="btn btn-primary" :href="project.urlRegresar">
                        <i class="fa fa-arrow-left"></i> Ver lista de proyectos
                    </a>
                </div>
            </div>
        </div>

        <div id="app">
            <template x-for="(promptTemplate, index) in project.tipoProyecto.promptTemplates" :key="promptTemplate.id">
                <div class="box box-primary" style="padding: 20px;">
                    <div class="box-header with-border">
                        <h3 class="box-title" x-text="promptTemplate.nombre"></h3>
                        <p x-text="promptTemplate.descripcion"></p>
                    </div>
                    <div x-data=" { archivo : getArchivo(index) }">
                        <template x-if="archivo">
                            <div>
                                <h1 x-text="archivo.path"></h1>
                                <h3>Documentación</h3>
                                <button @@click="copyCode(promptTemplate.id, 'documentation')">Copiar Documentación</button>
                                <button @@click="downloadCode(promptTemplate.id, 'documentation', 'documentacion.txt')">Descargar Documentación</button>
                                <pre><code x-text="archivo.documentacion"></code></pre>
                                <h3>Código</h3>
                                <button @@click="copyCode(promptTemplate.id, 'code')">Copiar Código</button>
                                <button @@click="downloadCode(promptTemplate.id, 'code', 'codigo.txt')">Descargar Código</button>
                                <pre><code x-text="archivo.contenido"></code></pre>
                            </div>
                        </template>
                        <template x-if="promptTemplate.archivos.length === 0">
                            <form>
                                <div class="box-body">
                                    <template x-for="param in promptTemplate.parametrosPromptTemplate" :key="param.id">
                                        <div class="form-group">
                                            <label x-text="param.label"></label>
                                            <textarea class="form-control" x-model="formData[param.nombre_parametro]" :placeholder="param.placeholder" rows="4"></textarea>
                                        </div>
                                    </template>
                                    <div class="box-footer">
                                        <button type="submit" class="btn btn-primary">Generar código</button>
                                    </div>
                                </div>
                            </form>
                        </template>
                    </div>
                </div>
            </template>
        </div>
    </section>
</div>

<script>
function codeGeneratorApp() {
    return {
        project: {},
        formData: {},
        async init() {
            let idProyecto = new URLSearchParams(window.location.search).get('idProyecto');
            if (!idProyecto) return;
            this.project = await this.fetchProjectData(idProyecto);
            var obj = JSON.parse(JSON.stringify(this.project))
            console.log(obj)
        },
        async fetchProjectData(idProyecto) {
            try {
                return await fetch(`/api/codeGenerator/proyecto/${idProyecto}`).then(res => res.json());
            } catch (error) {
                console.error(error);
            }
        },
        async generateNewFile(idPromptTemplate) {
            let body = {
                promptTemplate: this.project.tipoProyecto.promptTemplates.find(p => p.id === idPromptTemplate).prompt,
                parametros: this.formData
            };
            try {
                await fetch(`/api/codeGenerator/?IdProyecto=${this.project.id}&idPromptTemplate=${idPromptTemplate}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(body)
                });
            } catch (error) {
                console.error(error);
            }
        },
        copyCode(id, type) {
            let text = document.querySelector(`#${type}-${id}`).textContent;
            navigator.clipboard.writeText(text).then(() => alert('Texto copiado al portapapeles'));
        },
        downloadCode(id, type, fileName) {
            let text = document.querySelector(`#${type}-${id}`).textContent;
            let blob = new Blob([text], { type: 'text/plain' });
            let link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = fileName;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        },
        getArchivo(index) {
            let idArchivoPadre = null;
            let archivo = null;

            for (let i = 0; i < index +1; i++) {
                console.log(archivo, index);
        
                let promptTemplate = this.project?.tipoProyecto?.promptTemplates?.[i];

                if (!promptTemplate || !Array.isArray(promptTemplate.archivos)) {
                    console.error("Estructura inesperada en promptTemplates[i]:", promptTemplate);
                    return null;
                }

                archivo = promptTemplate.archivos.find(archivo => archivo.idArchivoPadre == idArchivoPadre && archivo.archivoVisible);

                if (!archivo) return null;

                idArchivoPadre = archivo.id;
                console.log(archivo)
            }

            return archivo;
        }

    };
}
</script>
